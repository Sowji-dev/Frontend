var s;
s=322;

var b:string|number|boolean;
b=true

var a:(number|string|boolean)[]
a=[22,56,false,21,'hi']
console.log(a)
let ar:Array<number|string>;
ar=[22,34,'hi',88]

interface Stud{
    firstname;
    age:number;
    gender;
}
let ob:Stud={
    firstname:'hi',
    age:99,
    gender:'male'
}




interface flower{
    name:string,
    color:string,
    petals:number|string
}
var c1:flower={
    name:'rose',
    color:'red',
    petals:5
}
function add(x:number,y:number){
    var c:number;
    c=x+y;
    return c
}
var d=add(11,5)
console.log(d)
add(22,55)

var rand:any='hello'

let c=99;
c=90

console.log(c)

let n:any;
n=99;
n='jhk'
 

var ar3:number[];
ar3=[33,55,11]
ar3[2]=98
console.log(ar3[2])
export {}


var ar:any[];
ar=[33,'jsf',44,true]




interface tech{
    course:string,
    exp:number,
    rating:string
}

var ar:tech[]
ar=[{
    course:'js',
    exp:9,
    rating:'B'
},
{
    course:'html',
    exp:4,
    rating:'A'
}
]
console.log(ar)
export {}





interface stu{
    name:string,
    age:number
    feepaid:boolean,
    tech:tech[]
}
interface tech{
    course:string,
    exp:number,
    rating?:string
}
var t1:tech={
    course:'js',
    exp:9,
    rating:'B'
}
var t2:tech={
    course:'html',
    exp:4,
}
var tot_stud:{}[]
var st1:stu={
    name:'sowji',
    age:16,
    feepaid:true,
    tech:[t1,t2]
}
var st2:stu={
    name:'suresh',
    age:44,
    feepaid:false,
    tech:[t2,t1]
}
tot_stud=[st1,st2]
console.log(tot_stud)
export {}

//drawback of tuple...allows additional vals into array
var tup:[string,number,string]=['sowji',100,'hello'];
tup.push('hi')
console.log(tup)


enum dim{left=22,right,abc,def,top=54,bottom};
let l=dim.left;
let r=dim.bottom;
let d1=dim[24]
console.log(l,r,d1) //22 22 55 abc

enum Veh{car,bike,auto,cycle,van}
var myVeh:string=Veh[2]
var myVeh2:Veh=Veh.cycle
console.log(myVeh,myVeh2) //auto 3

//if we have propertyIsEnumerable property for a datatype(eg:array,object,enum), we can use for in
//if we have Symbol.iterator property for a datatype(eg:array), we can use for of


//To generate tsconfig.json file:
    tsc --init

// To convert js file(bydef es5) to  es6:
tsc -t es6 sample


//alias type and interface are similar to each other.
type Stu = {
    name:string,
    num:number
}
interface Stu {
    name:string,
    num:number
}

interface ss extends Stu{
    isPaid:boolean
}
var s1:ss={
    name:'adfsd',
    num:21,
    isPaid:false
}

//Parameter properties
class Stu{
    constructor(public name:string,public age:number){
    }
}
var s1=new Stu('sowji',22)
console.log(s1)

//setters getters
class Stu{
    static grp:string='IT'
    constructor( private _name:string, private _a:number){}
    get name(){
        console.log('get fn')
        return this._name
    }
    set name(newn){
        console.log('set fn')
        this._name=newn
    }
}
var s1=new Stu('sowji',22)
console.log(s1.name);
s1.name='gsrdfsd'
console.log(s1.name);